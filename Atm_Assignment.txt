--Function

import csv
# from dataclasses import dataclass

fields = ['Name', 'Account Number', 'Balance', 'Account Type', 'Card Number', 'Mobile Number', 'PIN', 'ACCESS']
filename = "Accnt.csv"
balance = "bal.csv"


# @dataclass
class Accounts:


    def __init__(self, account_number):
        with open(filename, 'r') as file:
            for row in csv.reader(file):
                if account_number in row:
                    self.name, self.account_number, self.balance, self.account_type, self.card_number, self.mobile, \
                        self.pin, self.access = row



    def __str__(self):
        return f"{self.account_number} {self.balance} {self.name}"

    @classmethod
    def get_account_from_card(cls, card_number):
        with open(filename, 'r') as file:
            for row in file.readlines()[1:]:
                if card_number == row.split(',')[4]:
                    return cls(row.split(',')[1])

            raise ModuleNotFoundError

    def _update_record(self):
        with open(balance, 'a', newline="") as file:
            csv_writer = csv.writer(file)
            csv_writer.writerow((self.name, self.account_number, self.balance, self.card_number, self.mobile, self.pin,
                                 self.account_type, self.access))

    def get_account_number(self):
        return self.account_number

    def get_balance(self):
        return int(self.balance)

    def withdraw(self, amount: int):
        if amount % 200 != 0:
            raise IncorrectWithdrawalAmount("Withdrawal amount should be in multiples of Rs. 200")
        if self.get_balance() < 200:
            raise LowBalance("Balance too low")

        self.balance = self.get_balance() - amount
        self._update_record()

    def validate_phone_otp(self, mobile, otp):
        return self.mobile == mobile and self.pin == otp

    def update_pin(self, new_pin):
        self.pin = new_pin
        self._update_record()

    def block_card(self):
        self.access = 'BLOCKED'
        self._update_record()

class LowBalance(Exception):
    pass


class IncorrectWithdrawalAmount(Exception):
    pass
	
	
	
	



--main program



import re
from accounts import Accounts, LowBalance


class InvalidCard(Exception):
    def __init__(self):
        print("Not a valid CARD!!")


def other_menu():
    mention = int(input("1. PIN change\n2.Block card"))
    card = input("Enter card number:")
    acc = Accounts.get_account_from_card(card)
    print(acc)

    if acc:
        mobile = input("Enter mobile:")
        pin = input("Enter old pin:")
        isvalid = acc.validate_phone_otp(mobile, pin)
        if isvalid and mention == 1:
            new_pin = input("Enter new pin:")
            acc.update_pin(new_pin)
            print("New pin set!!")
        elif isvalid and mention == 2:
            acc.block_card()
            print("Hurray! Card blocked successfully!!")


def withdrawal():
    mention = input("a. Enter the amount to withdrawal in terms of 200 RS\n"
                    "b. Check balance info\n"
                    "c. If balance low then display Error message (Low balance)\n"
                    "d. Exit\n"
                    "e. Thank you\n")

    if mention == "a":
        acc_num = input("Enter account number")
        acc = Accounts(acc_num)
        amt = int(input("Enter Amount for withdrawal:"))
        acc.withdraw(amt)
        print(f"Record updated successfully!! Current balance {acc.get_balance()}")


try:
    # card = input("Enter Card number: ")
    #
    # if not re.search(r'[0-9]{4}-[0-9]{4}', card):
    #     raise InvalidCard

    while True:
        print("Menu:")
        print("1. Withdrawal")
        print("2. Savings")
        print("3. Current")
        print("4. other")
        option = int(input("Please select transaction:\n"))
        if option > 4:
            raise ValueError
        elif option == 1:
            withdrawal()
        elif option == 4:
            other_menu()

except LowBalance as err:
    print(err)
except InvalidCard:
    pass
except ValueError:
    print("Please enter correct option")
except Exception as err:
    print(err)
finally:
    print("Thank you!!")


